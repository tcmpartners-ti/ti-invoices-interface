image: gradle:8.3.0-jdk17

definitions:
  steps:
    - step: &build
        name: Build
        caches: [ gradle ]
        script:
          - echo "Building invoices..."
          - gradle build --daemon -x test

    - step: &unit-tests
        name: Unit tests
        caches: [ gradle ]
        script:
          - echo "Running unit tests..."
          - gradle test --daemon

    - step: &integration-tests
        name: Integration tests
        services: [ docker ]
        caches: [ gradle, docker ]
        script:
          - echo "Running integration tests..."
          - export TESTCONTAINERS_RYUK_DISABLED=true
          - gradle integrationTest --daemon

    - step: &scan-dependencies
        name: Scan dependencies
        caches: [ gradle ]
        script:
          # Install snyk cli
          - export SNYK_TOKEN=$SNYK_TOKEN
          - curl https://static.snyk.io/cli/latest/snyk-linux --output snyk && chmod +x ./snyk
          - chmod +x /opt/atlassian/pipelines/agent/build/gradlew
          - ./snyk test --all-projects
    - step: &scan-code
        name: Scan code
        caches: [ gradle ]
        script:
          - export SNYK_TOKEN=$SNYK_TOKEN
          - curl https://static.snyk.io/cli/latest/snyk-linux --output snyk && chmod +x ./snyk
          - ./snyk code test --severity-threshold=high
    - step: &scan-image
        name: Scan image
        caches: [ docker ]
        services: [ docker ]
        script:
          - export SNYK_TOKEN=$SNYK_TOKEN
          - curl https://static.snyk.io/cli/latest/snyk-linux --output snyk && chmod +x ./snyk
          - docker build -t ti-invoices:latest .
          - ./snyk container test ti-invoices:latest --severity-threshold=medium

    - step: &dev-approval
        name: Developer approval
        trigger: manual
        script:
          - echo "Step approved by developer"

    - step: &deploy-dev
        name: Deploy to development
        caches: [ docker ]
        services: [ docker ]
        script:
          # Login to container registry
          - echo $CR_PASS_DEV | docker login $CR_NAME_DEV -u $CR_USER_DEV --password-stdin
          # Build image
          - docker build -t $CR_NAME_DEV/ti-invoices:latest .
          # Push to container registry
          - docker push $CR_NAME_DEV/ti-invoices:latest

  services:
    docker:
      memory: 2048

pipelines:
  branches:
    # Production Branch
    main:
      - step: *build
      - step: *unit-tests

    # Staging (Test) branch
    develop:
      - step: *build
      - parallel:
          steps:
            - step: *unit-tests
            - step: *integration-tests
      - parallel: # Snyk scans
          steps:
            - step: *scan-dependencies
            - step: *scan-code
            - step: *scan-image

    # Development Branches
    feat/*:
      - step: *build
      - parallel:
          steps:
            - step: *unit-tests
            - step: *integration-tests
      - parallel: # Snyk scans
          steps:
            - step: *scan-dependencies
            - step: *scan-code
            - step: *scan-image
      - step: *dev-approval
      - step: *deploy-dev
